From ca3cf24987e15ef6bc042af0043cd5e0f063672c Mon Sep 17 00:00:00 2001
From: Ahree Hong <ahreeh@amazon.com>
Date: Wed, 14 Dec 2022 12:47:42 -0800
Subject: [PATCH] add support for registry credentials

Signed-off-by: Ahree Hong <ahreeh@amazon.com>
---
 Makefile                                      |  3 +-
 bootstrap/kubeadm/api/v1alpha4/conversion.go  | 37 ++++++++++++++++++-
 .../api/v1alpha4/zz_generated.conversion.go   | 17 ++++-----
 .../kubeadm/api/v1beta1/kubeadm_types.go      |  8 ++++
 ...strap.cluster.x-k8s.io_kubeadmconfigs.yaml | 16 ++++++++
 ...uster.x-k8s.io_kubeadmconfigtemplates.yaml | 16 ++++++++
 .../internal/bottlerocket/bootstrap.go        | 18 +++++++++
 .../internal/bottlerocket/bottlerocket.go     |  7 ++++
 .../types/upstreamv1beta1/conversion.go       |  5 +++
 .../zz_generated.conversion.go                | 17 ++++-----
 .../types/upstreamv1beta2/conversion.go       |  5 +++
 .../zz_generated.conversion.go                | 17 ++++-----
 .../types/upstreamv1beta3/conversion.go       |  5 +++
 .../zz_generated.conversion.go                | 17 ++++-----
 ...cluster.x-k8s.io_kubeadmcontrolplanes.yaml | 16 ++++++++
 ...x-k8s.io_kubeadmcontrolplanetemplates.yaml | 16 ++++++++
 16 files changed, 178 insertions(+), 42 deletions(-)

diff --git a/Makefile b/Makefile
index 150d9aa62..5a28132de 100644
--- a/Makefile
+++ b/Makefile
@@ -65,6 +65,7 @@ export PATH := $(abspath $(TOOLS_BIN_DIR)):$(PATH)
 # Set --output-base for conversion-gen if we are not within GOPATH
 ifneq ($(abspath $(ROOT_DIR)),$(shell go env GOPATH)/src/sigs.k8s.io/cluster-api)
 	CONVERSION_GEN_OUTPUT_BASE := --output-base=$(ROOT_DIR)
+	CONVERSION_GEN_OUTPUT_BASE_CAPD := --output-base=$(ROOT_DIR)/$(CAPD_DIR)
 else
 	export GOPATH := $(shell go env GOPATH)
 endif
@@ -406,7 +407,7 @@ generate-go-conversions-capd: $(CONVERSION_GEN) ## Generate conversions go code
 		--build-tag=ignore_autogenerated_capd \
 		--extra-peer-dirs=sigs.k8s.io/cluster-api/api/v1alpha3 \
 		--extra-peer-dirs=sigs.k8s.io/cluster-api/api/v1alpha4 \
-		--output-file-base=zz_generated.conversion $(CONVERSION_GEN_OUTPUT_BASE) \
+		--output-file-base=zz_generated.conversion $(CONVERSION_GEN_OUTPUT_BASE_CAPD) \
 		--go-header-file=../../../hack/boilerplate/boilerplate.generatego.txt
 
 .PHONY: generate-go-openapi
diff --git a/bootstrap/kubeadm/api/v1alpha4/conversion.go b/bootstrap/kubeadm/api/v1alpha4/conversion.go
index bce8664fc..a327a2651 100644
--- a/bootstrap/kubeadm/api/v1alpha4/conversion.go
+++ b/bootstrap/kubeadm/api/v1alpha4/conversion.go
@@ -62,8 +62,23 @@ func (src *KubeadmConfig) ConvertTo(dstRaw conversion.Hub) error {
 		}
 		dst.Spec.JoinConfiguration.Patches = restored.Spec.JoinConfiguration.Patches
 		dst.Spec.JoinConfiguration.SkipPhases = restored.Spec.JoinConfiguration.SkipPhases
+		if &restored.Spec.JoinConfiguration.RegistryMirror != nil {
+			if restored.Spec.JoinConfiguration.RegistryMirror.Username != "" && restored.Spec.JoinConfiguration.RegistryMirror.Password != ""{
+				dst.Spec.JoinConfiguration.RegistryMirror.Username = restored.Spec.JoinConfiguration.RegistryMirror.Username
+				dst.Spec.JoinConfiguration.RegistryMirror.Password = restored.Spec.JoinConfiguration.RegistryMirror.Password
+			}
+		}
 	}
-
+	if restored.Spec.ClusterConfiguration != nil {
+		if &restored.Spec.ClusterConfiguration.RegistryMirror != nil {
+			if restored.Spec.ClusterConfiguration.RegistryMirror.Username != "" && restored.Spec.ClusterConfiguration.RegistryMirror.Password != ""{
+				dst.Spec.ClusterConfiguration.RegistryMirror.Username = restored.Spec.ClusterConfiguration.RegistryMirror.Username
+				dst.Spec.ClusterConfiguration.RegistryMirror.Password = restored.Spec.ClusterConfiguration.RegistryMirror.Password
+			}
+		}
+	}
+	
+	
 	return nil
 }
 
@@ -127,6 +142,21 @@ func (src *KubeadmConfigTemplate) ConvertTo(dstRaw conversion.Hub) error {
 		}
 		dst.Spec.Template.Spec.JoinConfiguration.Patches = restored.Spec.Template.Spec.JoinConfiguration.Patches
 		dst.Spec.Template.Spec.JoinConfiguration.SkipPhases = restored.Spec.Template.Spec.JoinConfiguration.SkipPhases
+		
+		if &restored.Spec.Template.Spec.JoinConfiguration.RegistryMirror != nil {
+			if restored.Spec.Template.Spec.JoinConfiguration.RegistryMirror.Username != "" && restored.Spec.Template.Spec.JoinConfiguration.RegistryMirror.Password != "" {
+				dst.Spec.Template.Spec.JoinConfiguration.RegistryMirror.Username = restored.Spec.Template.Spec.JoinConfiguration.RegistryMirror.Username
+				dst.Spec.Template.Spec.JoinConfiguration.RegistryMirror.Password = restored.Spec.Template.Spec.JoinConfiguration.RegistryMirror.Password
+			}
+		}
+	}
+	if restored.Spec.Template.Spec.ClusterConfiguration != nil {
+		if &restored.Spec.Template.Spec.ClusterConfiguration.RegistryMirror != nil {
+			if restored.Spec.Template.Spec.ClusterConfiguration.RegistryMirror.Username != "" && restored.Spec.Template.Spec.ClusterConfiguration.RegistryMirror.Password != "" {
+				dst.Spec.Template.Spec.ClusterConfiguration.RegistryMirror.Username = restored.Spec.Template.Spec.ClusterConfiguration.RegistryMirror.Username
+				dst.Spec.Template.Spec.ClusterConfiguration.RegistryMirror.Password = restored.Spec.Template.Spec.ClusterConfiguration.RegistryMirror.Password
+			}
+		}
 	}
 
 	return nil
@@ -184,3 +214,8 @@ func Convert_v1beta1_ClusterConfiguration_To_v1alpha4_ClusterConfiguration(in *b
 	// ClusterConfiguration.BottlerocketCustomHostContainers exists in bootstrapv1.ClusterConfiguration but not in v1alpha4
 	return autoConvert_v1beta1_ClusterConfiguration_To_v1alpha4_ClusterConfiguration(in, out, s)
 }
+
+func Convert_v1beta1_RegistryMirrorConfiguration_To_v1alpha4_RegistryMirrorConfiguration(in *bootstrapv1.RegistryMirrorConfiguration, out *RegistryMirrorConfiguration, s apiconversion.Scope) error {
+	// RegistryMirror.Username and RegistryMirror.Password does not exist in v1alpha4
+	return autoConvert_v1beta1_RegistryMirrorConfiguration_To_v1alpha4_RegistryMirrorConfiguration(in, out, s)
+}
diff --git a/bootstrap/kubeadm/api/v1alpha4/zz_generated.conversion.go b/bootstrap/kubeadm/api/v1alpha4/zz_generated.conversion.go
index 070387806..ef3161dd1 100644
--- a/bootstrap/kubeadm/api/v1alpha4/zz_generated.conversion.go
+++ b/bootstrap/kubeadm/api/v1alpha4/zz_generated.conversion.go
@@ -410,11 +410,6 @@ func RegisterConversions(s *runtime.Scheme) error {
 	}); err != nil {
 		return err
 	}
-	if err := s.AddGeneratedConversionFunc((*v1beta1.RegistryMirrorConfiguration)(nil), (*RegistryMirrorConfiguration)(nil), func(a, b interface{}, scope conversion.Scope) error {
-		return Convert_v1beta1_RegistryMirrorConfiguration_To_v1alpha4_RegistryMirrorConfiguration(a.(*v1beta1.RegistryMirrorConfiguration), b.(*RegistryMirrorConfiguration), scope)
-	}); err != nil {
-		return err
-	}
 	if err := s.AddGeneratedConversionFunc((*SecretFileSource)(nil), (*v1beta1.SecretFileSource)(nil), func(a, b interface{}, scope conversion.Scope) error {
 		return Convert_v1alpha4_SecretFileSource_To_v1beta1_SecretFileSource(a.(*SecretFileSource), b.(*v1beta1.SecretFileSource), scope)
 	}); err != nil {
@@ -455,6 +450,11 @@ func RegisterConversions(s *runtime.Scheme) error {
 	}); err != nil {
 		return err
 	}
+	if err := s.AddConversionFunc((*v1beta1.RegistryMirrorConfiguration)(nil), (*RegistryMirrorConfiguration)(nil), func(a, b interface{}, scope conversion.Scope) error {
+		return Convert_v1beta1_RegistryMirrorConfiguration_To_v1alpha4_RegistryMirrorConfiguration(a.(*v1beta1.RegistryMirrorConfiguration), b.(*RegistryMirrorConfiguration), scope)
+	}); err != nil {
+		return err
+	}
 	if err := s.AddConversionFunc((*v1beta1.User)(nil), (*User)(nil), func(a, b interface{}, scope conversion.Scope) error {
 		return Convert_v1beta1_User_To_v1alpha4_User(a.(*v1beta1.User), b.(*User), scope)
 	}); err != nil {
@@ -1724,14 +1724,11 @@ func Convert_v1alpha4_RegistryMirrorConfiguration_To_v1beta1_RegistryMirrorConfi
 func autoConvert_v1beta1_RegistryMirrorConfiguration_To_v1alpha4_RegistryMirrorConfiguration(in *v1beta1.RegistryMirrorConfiguration, out *RegistryMirrorConfiguration, s conversion.Scope) error {
 	out.Endpoint = in.Endpoint
 	out.CACert = in.CACert
+	// WARNING: in.Username requires manual conversion: does not exist in peer-type
+	// WARNING: in.Password requires manual conversion: does not exist in peer-type
 	return nil
 }
 
-// Convert_v1beta1_RegistryMirrorConfiguration_To_v1alpha4_RegistryMirrorConfiguration is an autogenerated conversion function.
-func Convert_v1beta1_RegistryMirrorConfiguration_To_v1alpha4_RegistryMirrorConfiguration(in *v1beta1.RegistryMirrorConfiguration, out *RegistryMirrorConfiguration, s conversion.Scope) error {
-	return autoConvert_v1beta1_RegistryMirrorConfiguration_To_v1alpha4_RegistryMirrorConfiguration(in, out, s)
-}
-
 func autoConvert_v1alpha4_SecretFileSource_To_v1beta1_SecretFileSource(in *SecretFileSource, out *v1beta1.SecretFileSource, s conversion.Scope) error {
 	out.Name = in.Name
 	out.Key = in.Key
diff --git a/bootstrap/kubeadm/api/v1beta1/kubeadm_types.go b/bootstrap/kubeadm/api/v1beta1/kubeadm_types.go
index 4c5e693ea..792232990 100644
--- a/bootstrap/kubeadm/api/v1beta1/kubeadm_types.go
+++ b/bootstrap/kubeadm/api/v1beta1/kubeadm_types.go
@@ -224,6 +224,14 @@ type RegistryMirrorConfiguration struct {
 
 	// CACert defines the CA cert for the registry mirror
 	CACert string `json:"caCert,omitempty"`
+
+	// Username defines the username for the registry mirror
+	// +optional
+	Username string `json:"username,omitempty"`
+
+	// Password defines the password for the registry mirror
+	// +optional
+	Password string `json:"password,omitempty"`
 }
 
 // ControlPlaneComponent holds settings common to control plane component of the cluster.
diff --git a/bootstrap/kubeadm/config/crd/bases/bootstrap.cluster.x-k8s.io_kubeadmconfigs.yaml b/bootstrap/kubeadm/config/crd/bases/bootstrap.cluster.x-k8s.io_kubeadmconfigs.yaml
index d9e946f1e..a69cf1a50 100644
--- a/bootstrap/kubeadm/config/crd/bases/bootstrap.cluster.x-k8s.io_kubeadmconfigs.yaml
+++ b/bootstrap/kubeadm/config/crd/bases/bootstrap.cluster.x-k8s.io_kubeadmconfigs.yaml
@@ -2732,6 +2732,14 @@ spec:
                         description: Endpoint defines the registry mirror endpoint
                           to use for pulling images
                         type: string
+                      password:
+                        description: Password defines the password for the registry
+                          mirror
+                        type: string
+                      username:
+                        description: Username defines the username for the registry
+                          mirror
+                        type: string
                     type: object
                   scheduler:
                     description: Scheduler contains extra settings for the scheduler
@@ -3499,6 +3507,14 @@ spec:
                         description: Endpoint defines the registry mirror endpoint
                           to use for pulling images
                         type: string
+                      password:
+                        description: Password defines the password for the registry
+                          mirror
+                        type: string
+                      username:
+                        description: Username defines the username for the registry
+                          mirror
+                        type: string
                     type: object
                   skipPhases:
                     description: SkipPhases is a list of phases to skip during command
diff --git a/bootstrap/kubeadm/config/crd/bases/bootstrap.cluster.x-k8s.io_kubeadmconfigtemplates.yaml b/bootstrap/kubeadm/config/crd/bases/bootstrap.cluster.x-k8s.io_kubeadmconfigtemplates.yaml
index 51f378111..e3a318c19 100644
--- a/bootstrap/kubeadm/config/crd/bases/bootstrap.cluster.x-k8s.io_kubeadmconfigtemplates.yaml
+++ b/bootstrap/kubeadm/config/crd/bases/bootstrap.cluster.x-k8s.io_kubeadmconfigtemplates.yaml
@@ -2768,6 +2768,14 @@ spec:
                                 description: Endpoint defines the registry mirror
                                   endpoint to use for pulling images
                                 type: string
+                              password:
+                                description: Password defines the password for the
+                                  registry mirror
+                                type: string
+                              username:
+                                description: Username defines the username for the
+                                  registry mirror
+                                type: string
                             type: object
                           scheduler:
                             description: Scheduler contains extra settings for the
@@ -3590,6 +3598,14 @@ spec:
                                 description: Endpoint defines the registry mirror
                                   endpoint to use for pulling images
                                 type: string
+                              password:
+                                description: Password defines the password for the
+                                  registry mirror
+                                type: string
+                              username:
+                                description: Username defines the username for the
+                                  registry mirror
+                                type: string
                             type: object
                           skipPhases:
                             description: SkipPhases is a list of phases to skip during
diff --git a/bootstrap/kubeadm/internal/bottlerocket/bootstrap.go b/bootstrap/kubeadm/internal/bottlerocket/bootstrap.go
index fe280e091..58f38ca34 100644
--- a/bootstrap/kubeadm/internal/bottlerocket/bootstrap.go
+++ b/bootstrap/kubeadm/internal/bottlerocket/bootstrap.go
@@ -72,6 +72,20 @@ no-proxy = [{{stringsJoin .NoProxyEndpoints "," }}]
 data = "{{.RegistryMirrorCACert}}"
 trusted=true
 {{- end -}}
+`
+	// We need to assign creds for "public.ecr.aws" because host-ctr expects credentials to be assigned
+	// to "public.ecr.aws" rather than the mirror's endpoint
+	// TODO: Once the bottlerocket fixes are in we need to remove the "public.ecr.aws" creds
+	registryMirrorCredentialsTemplate = `{{define "registryMirrorCredentialsSettings" -}}
+[[settings.container-registry.credentials]]
+registry = "public.ecr.aws"
+username = "{{.RegistryMirrorUsername}}"
+password = "{{.RegistryMirrorPassword}}"
+[[settings.container-registry.credentials]]
+registry = "{{.RegistryMirrorEndpoint}}"
+username = "{{.RegistryMirrorUsername}}"
+password = "{{.RegistryMirrorPassword}}"
+{{- end -}}
 `
 	nodeLabelsTemplate = `{{ define "nodeLabelSettings" -}}
 [settings.kubernetes.node-labels]
@@ -104,6 +118,10 @@ trusted=true
 {{template "registryMirrorCACertSettings" .}}
 {{- end -}}
 
+{{- if and (ne .RegistryMirrorUsername "") (ne .RegistryMirrorPassword "")}}
+{{template "registryMirrorCredentialsSettings" .}}
+{{- end -}}
+
 {{- if (ne .NodeLabels "")}}
 {{template "nodeLabelSettings" .}}
 {{- end -}}
diff --git a/bootstrap/kubeadm/internal/bottlerocket/bottlerocket.go b/bootstrap/kubeadm/internal/bottlerocket/bottlerocket.go
index 1859a4816..ad8814934 100644
--- a/bootstrap/kubeadm/internal/bottlerocket/bottlerocket.go
+++ b/bootstrap/kubeadm/internal/bottlerocket/bottlerocket.go
@@ -41,6 +41,8 @@ type BottlerocketSettingsInput struct {
 	NoProxyEndpoints       []string
 	RegistryMirrorEndpoint string
 	RegistryMirrorCACert   string
+	RegistryMirrorUsername string
+	RegistryMirrorPassword string
 	NodeLabels             string
 	Taints                 string
 	ProviderId             string
@@ -124,6 +126,9 @@ func generateNodeUserData(kind string, tpl string, data interface{}) ([]byte, er
 	if _, err := tm.Parse(registryMirrorCACertTemplate); err != nil {
 		return nil, errors.Wrapf(err, "failed to parse registry mirror ca cert %s template", kind)
 	}
+	if _, err := tm.Parse(registryMirrorCredentialsTemplate); err != nil {
+		return nil, errors.Wrapf(err, "failed to parse registry mirror credentials %s template", kind)
+	}
 	if _, err := tm.Parse(nodeLabelsTemplate); err != nil {
 		return nil, errors.Wrapf(err, "failed to parse node labels %s template", kind)
 	}
@@ -188,6 +193,8 @@ func getBottlerocketNodeUserData(bootstrapContainerUserData []byte, users []boot
 		PauseContainerSource:   fmt.Sprintf("%s:%s", config.Pause.ImageRepository, config.Pause.ImageTag),
 		HTTPSProxyEndpoint:     config.ProxyConfiguration.HTTPSProxy,
 		RegistryMirrorEndpoint: config.RegistryMirrorConfiguration.Endpoint,
+		RegistryMirrorUsername: config.RegistryMirrorConfiguration.Username,
+		RegistryMirrorPassword: config.RegistryMirrorConfiguration.Password,
 		NodeLabels:             parseNodeLabels(config.KubeletExtraArgs["node-labels"]), // empty string if it does not exist
 		Taints:                 parseTaints(config.Taints),                              // empty string if it does not exist
 		ProviderId:             config.KubeletExtraArgs["provider-id"],
diff --git a/bootstrap/kubeadm/types/upstreamv1beta1/conversion.go b/bootstrap/kubeadm/types/upstreamv1beta1/conversion.go
index 6cfa9628b..f2990795e 100644
--- a/bootstrap/kubeadm/types/upstreamv1beta1/conversion.go
+++ b/bootstrap/kubeadm/types/upstreamv1beta1/conversion.go
@@ -100,3 +100,8 @@ func Convert_v1beta1_ClusterConfiguration_To_upstreamv1beta1_ClusterConfiguratio
 	// ClusterConfiguration.BottlerocketCustomHostContainers exists in bootstrapv1.ClusterConfiguration but not in upstreamv1beta1
 	return autoConvert_v1beta1_ClusterConfiguration_To_upstreamv1beta1_ClusterConfiguration(src, dst, s)
 }
+
+func Convert_v1beta1_RegistryMirrorConfiguration_To_upstreamv1beta1_RegistryMirrorConfiguration(in *bootstrapv1.RegistryMirrorConfiguration, out *RegistryMirrorConfiguration, s apimachineryconversion.Scope) error {
+	// RegistryMirror.Username and RegistryMirror.Password does not exist in upstreamv1beta1
+	return autoConvert_v1beta1_RegistryMirrorConfiguration_To_upstreamv1beta1_RegistryMirrorConfiguration(in, out, s)
+}
\ No newline at end of file
diff --git a/bootstrap/kubeadm/types/upstreamv1beta1/zz_generated.conversion.go b/bootstrap/kubeadm/types/upstreamv1beta1/zz_generated.conversion.go
index d252294a0..537085c64 100644
--- a/bootstrap/kubeadm/types/upstreamv1beta1/zz_generated.conversion.go
+++ b/bootstrap/kubeadm/types/upstreamv1beta1/zz_generated.conversion.go
@@ -263,11 +263,6 @@ func RegisterConversions(s *runtime.Scheme) error {
 	}); err != nil {
 		return err
 	}
-	if err := s.AddGeneratedConversionFunc((*v1beta1.RegistryMirrorConfiguration)(nil), (*RegistryMirrorConfiguration)(nil), func(a, b interface{}, scope conversion.Scope) error {
-		return Convert_v1beta1_RegistryMirrorConfiguration_To_upstreamv1beta1_RegistryMirrorConfiguration(a.(*v1beta1.RegistryMirrorConfiguration), b.(*RegistryMirrorConfiguration), scope)
-	}); err != nil {
-		return err
-	}
 	if err := s.AddConversionFunc((*ClusterConfiguration)(nil), (*v1beta1.ClusterConfiguration)(nil), func(a, b interface{}, scope conversion.Scope) error {
 		return Convert_upstreamv1beta1_ClusterConfiguration_To_v1beta1_ClusterConfiguration(a.(*ClusterConfiguration), b.(*v1beta1.ClusterConfiguration), scope)
 	}); err != nil {
@@ -298,6 +293,11 @@ func RegisterConversions(s *runtime.Scheme) error {
 	}); err != nil {
 		return err
 	}
+	if err := s.AddConversionFunc((*v1beta1.RegistryMirrorConfiguration)(nil), (*RegistryMirrorConfiguration)(nil), func(a, b interface{}, scope conversion.Scope) error {
+		return Convert_v1beta1_RegistryMirrorConfiguration_To_upstreamv1beta1_RegistryMirrorConfiguration(a.(*v1beta1.RegistryMirrorConfiguration), b.(*RegistryMirrorConfiguration), scope)
+	}); err != nil {
+		return err
+	}
 	return nil
 }
 
@@ -1028,10 +1028,7 @@ func Convert_upstreamv1beta1_RegistryMirrorConfiguration_To_v1beta1_RegistryMirr
 func autoConvert_v1beta1_RegistryMirrorConfiguration_To_upstreamv1beta1_RegistryMirrorConfiguration(in *v1beta1.RegistryMirrorConfiguration, out *RegistryMirrorConfiguration, s conversion.Scope) error {
 	out.Endpoint = in.Endpoint
 	out.CACert = in.CACert
+	// WARNING: in.Username requires manual conversion: does not exist in peer-type
+	// WARNING: in.Password requires manual conversion: does not exist in peer-type
 	return nil
 }
-
-// Convert_v1beta1_RegistryMirrorConfiguration_To_upstreamv1beta1_RegistryMirrorConfiguration is an autogenerated conversion function.
-func Convert_v1beta1_RegistryMirrorConfiguration_To_upstreamv1beta1_RegistryMirrorConfiguration(in *v1beta1.RegistryMirrorConfiguration, out *RegistryMirrorConfiguration, s conversion.Scope) error {
-	return autoConvert_v1beta1_RegistryMirrorConfiguration_To_upstreamv1beta1_RegistryMirrorConfiguration(in, out, s)
-}
diff --git a/bootstrap/kubeadm/types/upstreamv1beta2/conversion.go b/bootstrap/kubeadm/types/upstreamv1beta2/conversion.go
index e9e70d882..b3b0e25c2 100644
--- a/bootstrap/kubeadm/types/upstreamv1beta2/conversion.go
+++ b/bootstrap/kubeadm/types/upstreamv1beta2/conversion.go
@@ -97,3 +97,8 @@ func Convert_v1beta1_ClusterConfiguration_To_upstreamv1beta2_ClusterConfiguratio
 	// ClusterConfiguration.BottlerocketCustomHostContainers exists in bootstrapv1.ClusterConfiguration but not in upstreamv1beta2
 	return autoConvert_v1beta1_ClusterConfiguration_To_upstreamv1beta2_ClusterConfiguration(src, dst, s)
 }
+
+func Convert_v1beta1_RegistryMirrorConfiguration_To_upstreamv1beta2_RegistryMirrorConfiguration(in *bootstrapv1.RegistryMirrorConfiguration, out *RegistryMirrorConfiguration, s apimachineryconversion.Scope) error {
+	// RegistryMirror.Username and RegistryMirror.Password does not exist in upstreamv1beta2
+	return autoConvert_v1beta1_RegistryMirrorConfiguration_To_upstreamv1beta2_RegistryMirrorConfiguration(in, out, s)
+}
\ No newline at end of file
diff --git a/bootstrap/kubeadm/types/upstreamv1beta2/zz_generated.conversion.go b/bootstrap/kubeadm/types/upstreamv1beta2/zz_generated.conversion.go
index f670cafa5..60807fc54 100644
--- a/bootstrap/kubeadm/types/upstreamv1beta2/zz_generated.conversion.go
+++ b/bootstrap/kubeadm/types/upstreamv1beta2/zz_generated.conversion.go
@@ -258,11 +258,6 @@ func RegisterConversions(s *runtime.Scheme) error {
 	}); err != nil {
 		return err
 	}
-	if err := s.AddGeneratedConversionFunc((*v1beta1.RegistryMirrorConfiguration)(nil), (*RegistryMirrorConfiguration)(nil), func(a, b interface{}, scope conversion.Scope) error {
-		return Convert_v1beta1_RegistryMirrorConfiguration_To_upstreamv1beta2_RegistryMirrorConfiguration(a.(*v1beta1.RegistryMirrorConfiguration), b.(*RegistryMirrorConfiguration), scope)
-	}); err != nil {
-		return err
-	}
 	if err := s.AddConversionFunc((*ClusterConfiguration)(nil), (*v1beta1.ClusterConfiguration)(nil), func(a, b interface{}, scope conversion.Scope) error {
 		return Convert_upstreamv1beta2_ClusterConfiguration_To_v1beta1_ClusterConfiguration(a.(*ClusterConfiguration), b.(*v1beta1.ClusterConfiguration), scope)
 	}); err != nil {
@@ -298,6 +293,11 @@ func RegisterConversions(s *runtime.Scheme) error {
 	}); err != nil {
 		return err
 	}
+	if err := s.AddConversionFunc((*v1beta1.RegistryMirrorConfiguration)(nil), (*RegistryMirrorConfiguration)(nil), func(a, b interface{}, scope conversion.Scope) error {
+		return Convert_v1beta1_RegistryMirrorConfiguration_To_upstreamv1beta2_RegistryMirrorConfiguration(a.(*v1beta1.RegistryMirrorConfiguration), b.(*RegistryMirrorConfiguration), scope)
+	}); err != nil {
+		return err
+	}
 	return nil
 }
 
@@ -1042,10 +1042,7 @@ func Convert_upstreamv1beta2_RegistryMirrorConfiguration_To_v1beta1_RegistryMirr
 func autoConvert_v1beta1_RegistryMirrorConfiguration_To_upstreamv1beta2_RegistryMirrorConfiguration(in *v1beta1.RegistryMirrorConfiguration, out *RegistryMirrorConfiguration, s conversion.Scope) error {
 	out.Endpoint = in.Endpoint
 	out.CACert = in.CACert
+	// WARNING: in.Username requires manual conversion: does not exist in peer-type
+	// WARNING: in.Password requires manual conversion: does not exist in peer-type
 	return nil
 }
-
-// Convert_v1beta1_RegistryMirrorConfiguration_To_upstreamv1beta2_RegistryMirrorConfiguration is an autogenerated conversion function.
-func Convert_v1beta1_RegistryMirrorConfiguration_To_upstreamv1beta2_RegistryMirrorConfiguration(in *v1beta1.RegistryMirrorConfiguration, out *RegistryMirrorConfiguration, s conversion.Scope) error {
-	return autoConvert_v1beta1_RegistryMirrorConfiguration_To_upstreamv1beta2_RegistryMirrorConfiguration(in, out, s)
-}
diff --git a/bootstrap/kubeadm/types/upstreamv1beta3/conversion.go b/bootstrap/kubeadm/types/upstreamv1beta3/conversion.go
index 1a96971e5..e12e3acfd 100644
--- a/bootstrap/kubeadm/types/upstreamv1beta3/conversion.go
+++ b/bootstrap/kubeadm/types/upstreamv1beta3/conversion.go
@@ -88,3 +88,8 @@ func Convert_v1beta1_JoinConfiguration_To_upstreamv1beta3_JoinConfiguration(src
 	// JoinConfiguration.BottlerocketCustomHostContainers exists in bootstrapv1.JoinControlPlane but not in upstreamv1beta3
 	return autoConvert_v1beta1_JoinConfiguration_To_upstreamv1beta3_JoinConfiguration(src, dst, s)
 }
+
+func Convert_v1beta1_RegistryMirrorConfiguration_To_upstreamv1beta3_RegistryMirrorConfiguration(in *bootstrapv1.RegistryMirrorConfiguration, out *RegistryMirrorConfiguration, s apimachineryconversion.Scope) error {
+	// RegistryMirror.Username and RegistryMirror.Password does not exist in upstreamv1beta3
+	return autoConvert_v1beta1_RegistryMirrorConfiguration_To_upstreamv1beta3_RegistryMirrorConfiguration(in, out, s)
+}
\ No newline at end of file
diff --git a/bootstrap/kubeadm/types/upstreamv1beta3/zz_generated.conversion.go b/bootstrap/kubeadm/types/upstreamv1beta3/zz_generated.conversion.go
index f1a56bb26..e643fc782 100644
--- a/bootstrap/kubeadm/types/upstreamv1beta3/zz_generated.conversion.go
+++ b/bootstrap/kubeadm/types/upstreamv1beta3/zz_generated.conversion.go
@@ -263,11 +263,6 @@ func RegisterConversions(s *runtime.Scheme) error {
 	}); err != nil {
 		return err
 	}
-	if err := s.AddGeneratedConversionFunc((*v1beta1.RegistryMirrorConfiguration)(nil), (*RegistryMirrorConfiguration)(nil), func(a, b interface{}, scope conversion.Scope) error {
-		return Convert_v1beta1_RegistryMirrorConfiguration_To_upstreamv1beta3_RegistryMirrorConfiguration(a.(*v1beta1.RegistryMirrorConfiguration), b.(*RegistryMirrorConfiguration), scope)
-	}); err != nil {
-		return err
-	}
 	if err := s.AddConversionFunc((*InitConfiguration)(nil), (*v1beta1.InitConfiguration)(nil), func(a, b interface{}, scope conversion.Scope) error {
 		return Convert_upstreamv1beta3_InitConfiguration_To_v1beta1_InitConfiguration(a.(*InitConfiguration), b.(*v1beta1.InitConfiguration), scope)
 	}); err != nil {
@@ -298,6 +293,11 @@ func RegisterConversions(s *runtime.Scheme) error {
 	}); err != nil {
 		return err
 	}
+	if err := s.AddConversionFunc((*v1beta1.RegistryMirrorConfiguration)(nil), (*RegistryMirrorConfiguration)(nil), func(a, b interface{}, scope conversion.Scope) error {
+		return Convert_v1beta1_RegistryMirrorConfiguration_To_upstreamv1beta3_RegistryMirrorConfiguration(a.(*v1beta1.RegistryMirrorConfiguration), b.(*RegistryMirrorConfiguration), scope)
+	}); err != nil {
+		return err
+	}
 	return nil
 }
 
@@ -1049,10 +1049,7 @@ func Convert_upstreamv1beta3_RegistryMirrorConfiguration_To_v1beta1_RegistryMirr
 func autoConvert_v1beta1_RegistryMirrorConfiguration_To_upstreamv1beta3_RegistryMirrorConfiguration(in *v1beta1.RegistryMirrorConfiguration, out *RegistryMirrorConfiguration, s conversion.Scope) error {
 	out.Endpoint = in.Endpoint
 	out.CACert = in.CACert
+	// WARNING: in.Username requires manual conversion: does not exist in peer-type
+	// WARNING: in.Password requires manual conversion: does not exist in peer-type
 	return nil
 }
-
-// Convert_v1beta1_RegistryMirrorConfiguration_To_upstreamv1beta3_RegistryMirrorConfiguration is an autogenerated conversion function.
-func Convert_v1beta1_RegistryMirrorConfiguration_To_upstreamv1beta3_RegistryMirrorConfiguration(in *v1beta1.RegistryMirrorConfiguration, out *RegistryMirrorConfiguration, s conversion.Scope) error {
-	return autoConvert_v1beta1_RegistryMirrorConfiguration_To_upstreamv1beta3_RegistryMirrorConfiguration(in, out, s)
-}
diff --git a/controlplane/kubeadm/config/crd/bases/controlplane.cluster.x-k8s.io_kubeadmcontrolplanes.yaml b/controlplane/kubeadm/config/crd/bases/controlplane.cluster.x-k8s.io_kubeadmcontrolplanes.yaml
index d52ecd670..13a20c398 100644
--- a/controlplane/kubeadm/config/crd/bases/controlplane.cluster.x-k8s.io_kubeadmcontrolplanes.yaml
+++ b/controlplane/kubeadm/config/crd/bases/controlplane.cluster.x-k8s.io_kubeadmcontrolplanes.yaml
@@ -3223,6 +3223,14 @@ spec:
                             description: Endpoint defines the registry mirror endpoint
                               to use for pulling images
                             type: string
+                          password:
+                            description: Password defines the password for the registry
+                              mirror
+                            type: string
+                          username:
+                            description: Username defines the username for the registry
+                              mirror
+                            type: string
                         type: object
                       scheduler:
                         description: Scheduler contains extra settings for the scheduler
@@ -4026,6 +4034,14 @@ spec:
                             description: Endpoint defines the registry mirror endpoint
                               to use for pulling images
                             type: string
+                          password:
+                            description: Password defines the password for the registry
+                              mirror
+                            type: string
+                          username:
+                            description: Username defines the username for the registry
+                              mirror
+                            type: string
                         type: object
                       skipPhases:
                         description: SkipPhases is a list of phases to skip during
diff --git a/controlplane/kubeadm/config/crd/bases/controlplane.cluster.x-k8s.io_kubeadmcontrolplanetemplates.yaml b/controlplane/kubeadm/config/crd/bases/controlplane.cluster.x-k8s.io_kubeadmcontrolplanetemplates.yaml
index 922207f47..8fe129196 100644
--- a/controlplane/kubeadm/config/crd/bases/controlplane.cluster.x-k8s.io_kubeadmcontrolplanetemplates.yaml
+++ b/controlplane/kubeadm/config/crd/bases/controlplane.cluster.x-k8s.io_kubeadmcontrolplanetemplates.yaml
@@ -1858,6 +1858,14 @@ spec:
                                     description: Endpoint defines the registry mirror
                                       endpoint to use for pulling images
                                     type: string
+                                  password:
+                                    description: Password defines the password for
+                                      the registry mirror
+                                    type: string
+                                  username:
+                                    description: Username defines the username for
+                                      the registry mirror
+                                    type: string
                                 type: object
                               scheduler:
                                 description: Scheduler contains extra settings for
@@ -2716,6 +2724,14 @@ spec:
                                     description: Endpoint defines the registry mirror
                                       endpoint to use for pulling images
                                     type: string
+                                  password:
+                                    description: Password defines the password for
+                                      the registry mirror
+                                    type: string
+                                  username:
+                                    description: Username defines the username for
+                                      the registry mirror
+                                    type: string
                                 type: object
                               skipPhases:
                                 description: SkipPhases is a list of phases to skip
-- 
2.37.1

